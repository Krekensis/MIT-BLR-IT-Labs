'''
For the case study given, answer the questions with a report
with story, visuals and data summaries.

1. Basic Data Exploration
    • Load the dataset into a Pandas Data Frame and display the first 5 rows of the dataset.
    • Check the number of rows and columns in the dataset.
    • Identify any missing values in the dataset.
2. Sales Analysis
    • Calculate the total revenue generated by the supermarket.
    • Find out which branch had the highest sales.
    • Identify the most sold product category.
    • Determine the average transaction amount.
3. Customer Behavior
    • Count the number of unique customers.
    • Compare the total sales made by Members vs. Non-Members.
    • Find out which payment method is the most preferred.
4. Trend Analysis
    • Find out which day of the week has the highest sales.
    • Plot a line chart to visualize the daily sales trend.
    • Identify the month with the highest total sales.
5. Customer Satisfaction
    • Find the average rating given by customers.
    • Identify the branch with the highest customer rating.
    • Create a bar chart showing the average rating per product category.
'''

import pandas as pd
import matplotlib.pyplot as mplot

df = pd.read_csv("./Datasets/supermarket_sales.csv")

# 1
print("First 5 rows:\n", df.head())
print("\nNumber of rows and columns:\n", df.shape)
print("\nMissing values:\n", df.isnull().sum())

# 2
ttlRev = df['Total'].sum()
hiBranch = df.groupby('Branch')['Total'].sum().idxmax()
maxCat = df['Product line'].value_counts().idxmax()
avgTrscn = df['Total'].mean()

print(f"\n\nTotal Revenue: {ttlRev}")
print(f"Branch with highest sales: {hiBranch}")
print(f"Most sold product category: {maxCat}")
print(f"Average transaction amount: {avgTrscn}")

# 3
uniqueCustomer = df['Invoice ID'].nunique()
customerType = df.groupby('Customer type')['Total'].sum()
prefPayment = df['Payment'].value_counts().idxmax()

print(f"\n\nNumber of unique customers: {uniqueCustomer}")
print("Total Sales by Customer Type:\n", customerType)
print(f"Most preferred payment method: {prefPayment}")

# 4
df['Date'] = pd.to_datetime(df['Date'])
df['DayOfWeek'] = df['Date'].dt.day_name()
hiSaleDay = df.groupby('DayOfWeek')['Total'].sum().idxmax()
print(f"\nDay with highest sales: {hiSaleDay}")

df['Month'] = df['Date'].dt.month_name()
hiSaleMonth = df.groupby('Month')['Total'].sum().idxmax()
print(f"Month with highest sales: {hiSaleMonth}")

dailySales = df.groupby('Date')['Total'].sum()
mplot.figure(figsize=(12, 8))
dailySales.plot(title='Daily Sales Trend', marker='o')
mplot.xlabel('Date')
mplot.ylabel('Total Sales')
mplot.xticks(rotation=45)
mplot.savefig("./Lab 10/Graphs/Q1_d_linechart.png")
mplot.show()

# 5
avgRating = df['Rating'].mean()
hiRateBranch = df.groupby('Branch')['Rating'].mean().idxmax()

print(f"Average customer rating: {avgRating}")
print(f"Branch with highest rating: {hiRateBranch}")

prodCat = df.groupby('Product line')['Rating'].mean()
mplot.figure(figsize=(10, 8))
mplot.bar(prodCat.index, prodCat.values, color='skyblue')
mplot.xticks(rotation=15)
mplot.xlabel('Product Line')
mplot.ylabel('Average Rating')
mplot.title('Average Rating per Product Line')
mplot.savefig("./Lab 10/Graphs/Q1_e_barplot.png")
mplot.show()
